{"version":3,"file":"static/js/978.cb52a085.chunk.js","mappings":"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","sources":["API/address.js","AdditionalFunction.js","Components/Address/Address.js"],"sourcesContent":["// API/address.js\nimport { DOMAIN } from \"../AdditionalFunction\";\nconst host = `${DOMAIN}/address`\nexport const postAddress = async (address) => {\n    const response = await fetch(`${host}/postaddress`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"authtoken\": localStorage.getItem(\"authtoken\"),\n        },\n        body: JSON.stringify(address),\n    });\n    const data = await response.json();\n\n    if (data.status === \"success\")\n        return { status: \"success\" };\n    return { status: \"error\", message: \"Something went wrong\" }\n}\n\nexport const getAddress = async () => {\n    const response = await fetch(`${host}/getaddress`, {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"authtoken\": localStorage.getItem(\"authtoken\"),\n        },\n    });\n    const data = await response.json();\n    return data;\n}\n","const host = \"\"\nconst DOMAIN = `${host}/api`\nconst findInObjectArray = (arr, key, value) => {\n    for (let i = 0; i < arr.length; i++) {\n        const element = arr[i];\n        if (element[key] === value) {\n            return true\n        }\n    }\n    return false\n}\nconst union = (databaseCart, reduxCart) => {\n    const arr = [];\n    [...databaseCart, ...reduxCart].forEach((item) => {\n        if (!findInObjectArray(arr, \"product_id\", item.product_id)) {\n            arr.push(item);\n        }\n    })\n    return arr;\n}\nconst difference = (databaseCart, reduxCart) => {\n    const arr = [];\n    reduxCart.forEach((item) => {\n        if (!findInObjectArray(databaseCart, \"product_id\", item.product_id)) {\n            arr.push(item);\n        }\n    })\n    return arr;\n}\n\nconst mergeCart = (databaseCart, reduxCart) => {\n    return { union: union(databaseCart, reduxCart), difference: difference(databaseCart, reduxCart) };\n}\n\n\nconst findIndexof = (cart,key, value) => {\n    for (let i = 0; i < cart.length; i++) {\n        const element = cart[i];\n        if (element[key] === value) {\n            return i;\n        }\n    }\n    return -1;\n};\n\nconst shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\n\nconst FinalBalance=cart=>{\n    let total = 0;\n    for (let i = 0; i < cart.length; i++) {\n      const item = cart[i];\n      total = total+item.quantity*item.price;\n    }\n    return total;\n  };\n\n\nexport { DOMAIN, findInObjectArray, union, difference, mergeCart, findIndexof , shuffleArray, FinalBalance}","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Select from \"react-select\";\r\nimport Contries from \"../../Countries.json\";\r\nimport { setToAddress } from \"../../Redux/Slice/addressSlice\";\r\nimport { postAddress } from \"../../API/address\";\r\n\r\nconst Div = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  .shipping {\r\n    background-color: white;\r\n    padding: 20px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n    width: 100%;\r\n    max-width: 400px;\r\n    text-align: center;\r\n\r\n    h1 {\r\n      font-size: 1.8rem;\r\n      margin-bottom: 20px;\r\n    }\r\n\r\n    form {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n\r\n    h5 {\r\n      text-align: left;\r\n      margin: 10px 0;\r\n    }\r\n\r\n    input {\r\n      width: 95%;\r\n      padding: 10px;\r\n      margin-bottom: 15px;\r\n      border: 1px solid #ccc;\r\n      border-radius: 5px;\r\n      transition: border-color 0.3s ease;\r\n    }\r\n\r\n    input:focus {\r\n      outline: none;\r\n      border-color: #007185;\r\n    }\r\n\r\n    button {\r\n      width: 100%;\r\n      height: 40px;\r\n      background-color: #f0c14b;\r\n      border: 1px solid #a88734 #9c7e31 #846a29;\r\n      color: #111;\r\n      cursor: pointer;\r\n      transition: background-color 0.3s ease;\r\n    }\r\n\r\n    button:hover {\r\n      background-color: #ddb347;\r\n    }\r\n\r\n    .extra {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      gap: 10px;\r\n      input {\r\n        width: 84%;\r\n      }\r\n    }\r\n\r\n    .default-address {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-top: 10px;\r\n\r\n      input {\r\n        width:auto;\r\n        margin: 0px 5px 5px 0px;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Address = () => {\r\n  const navigate = useNavigate();\r\n  const user = localStorage.getItem(\"authtoken\");\r\n  useEffect(()=>{\r\n    if(!user){\r\n      navigate(\"/\");\r\n    }\r\n  },[user,navigate])\r\n  // State variables to hold data\r\n  const [selectedCountry, setSelectedCountry] = useState(null);\r\n  const [fullName, setFullName] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const [addressLine1, setAddressLine1] = useState(\"\");\r\n  const [addressLine2, setAddressLine2] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [state, setState] = useState(\"\");\r\n  const [zipCode, setZipCode] = useState(\"\");\r\n  const options = Contries;\r\n  // Handle country selection\r\n  const handleCountryChange = (selectedOption) => {\r\n    setSelectedCountry(selectedOption.value);\r\n  };\r\n  const mergeaddress = [addressLine1, addressLine2];\r\n  const dispatch = useDispatch();\r\n  // Handle form submission\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const address = {\r\n      fullName,\r\n      phoneNumber,\r\n      Address: mergeaddress,\r\n      city,\r\n      state,\r\n      Country: selectedCountry,\r\n      zipCode,\r\n    };\r\n    await postAddress(address);\r\n    dispatch(setToAddress({ address }));\r\n    navigate(\"/payment\");\r\n  };\r\n  const handleCheckboxClick = () => {\r\n    const checkbox = document.getElementById(\"defaultAddressCheckbox\");\r\n    if (checkbox) {\r\n      checkbox.checked = !checkbox.checked;\r\n    }\r\n  };\r\n  return (\r\n    <Div>\r\n      <div className=\"shipping\">\r\n        <h1>Add a new address</h1>\r\n        <form onSubmit={handleSubmit}>\r\n          {/* Country/Region Dropdown */}\r\n          <h5>Country/Region</h5>\r\n          <SearchableSelect options={options} onChange={handleCountryChange} />\r\n\r\n          {/* Full Name */}\r\n          <h5>Full name</h5>\r\n          <input\r\n            type=\"text\"\r\n            value={fullName}\r\n            onChange={(e) => setFullName(e.target.value)}\r\n            required\r\n          />\r\n\r\n          {/* Phone Number */}\r\n          <h5>Phone number</h5>\r\n          <input\r\n            type=\"tel\"\r\n            value={phoneNumber}\r\n            onChange={(e) => setPhoneNumber(e.target.value)}\r\n            required\r\n          />\r\n\r\n          {/* Address */}\r\n          <h5>Address</h5>\r\n          <input\r\n            type=\"text\"\r\n            value={addressLine1}\r\n            onChange={(e) => setAddressLine1(e.target.value)}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            value={addressLine2}\r\n            onChange={(e) => setAddressLine2(e.target.value)}\r\n          />\r\n\r\n          {/* City */}\r\n          <div className=\"extra\">\r\n            <div>\r\n              <h5>City</h5>\r\n              <input\r\n                type=\"text\"\r\n                value={city}\r\n                onChange={(e) => setCity(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            {/* State/Region Dropdown */}\r\n            <div>\r\n              <h5>State/Region</h5>\r\n              <input\r\n                type=\"text\"\r\n                value={state}\r\n                onChange={(e) => setState(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n\r\n            {/* Zip Code */}\r\n            <div>\r\n              <h5>Zip Code</h5>\r\n              <input\r\n                type=\"number\"\r\n                value={zipCode}\r\n                onChange={(e) => setZipCode(e.target.value)}\r\n                maxLength={6}\r\n                minLength={6}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Default Address Checkbox */}\r\n          <div className=\"default-address\">\r\n            <input type=\"checkbox\" name=\"\" id=\"defaultAddressCheckbox\" onClick={handleCheckboxClick}/>\r\n            <p onClick={handleCheckboxClick}>Mark this my default address</p>\r\n          </div>\r\n\r\n          {/* Submit Button */}\r\n          <button type=\"submit\">Add Address</button>\r\n        </form>\r\n      </div>\r\n    </Div>\r\n  );\r\n};\r\n\r\nexport default Address;\r\n\r\nconst SearchableSelect = ({ options, onChange }) => {\r\n  return (\r\n    <Select\r\n      options={options}\r\n      isSearchable\r\n      placeholder=\"Select your Country\"\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n"],"names":["host","concat","DOMAIN","postAddress","async","response","fetch","method","headers","localStorage","getItem","body","JSON","stringify","address","json","status","message","getAddress","findInObjectArray","arr","key","value","i","length","union","databaseCart","reduxCart","forEach","item","product_id","push","difference","mergeCart","findIndexof","cart","FinalBalance","total","quantity","price","Div","styled","div","_templateObject","_taggedTemplateLiteral","Address","navigate","useNavigate","user","useEffect","selectedCountry","setSelectedCountry","useState","fullName","setFullName","phoneNumber","setPhoneNumber","addressLine1","setAddressLine1","addressLine2","setAddressLine2","city","setCity","state","setState","zipCode","setZipCode","options","Contries","mergeaddress","dispatch","useDispatch","handleCheckboxClick","checkbox","document","getElementById","checked","_jsx","children","_jsxs","className","onSubmit","event","preventDefault","Country","setToAddress","SearchableSelect","onChange","selectedOption","type","e","target","required","maxLength","minLength","name","id","onClick","_ref","Select","isSearchable","placeholder"],"sourceRoot":""}
{"version":3,"file":"static/js/817.05f739f5.chunk.js","mappings":"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","sources":["API/order.js","AdditionalFunction.js","Components/OrderPreview/OrderPreview.js"],"sourcesContent":["// API/order.js\nimport { DOMAIN } from \"../AdditionalFunction\";\n\nconst host = `${DOMAIN}/order`;\n\nexport const getOrder = async () => {\n  try {\n    const response = await fetch(`${host}/getorder`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authtoken: localStorage.getItem(\"authtoken\"),\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch order data\");\n    }\n    const data = await response.json();\n    return data.data;\n  } catch (error) {\n    console.error(\"Error during order data fetch:\", error);\n    return { status: \"error\", message: \"Something went wrong!\" };\n  }\n};\n\nexport const postOrder = async () => {\n  try {\n    const response = await fetch(`${host}/postorder`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authtoken: localStorage.getItem(\"authtoken\"),\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to create a new order\");\n    }\n\n    const data = await response.json();\n    if (data.status === \"success\") {\n      return { status: \"success\", message: \"New order created successfully\", orderId:data.orderId };\n    }\n\n    return { status: \"error\", message: \"Error creating a new order\" };\n  } catch (error) {\n    console.error(\"Error during new order creation:\", error);\n    return { status: \"error\", message: \"Something went wrong!\" };\n  }\n};\n\n\nexport const orderbyId = async(orderId)=>{\n  try {\n    const response = await fetch(`${host}/orderbyid/${orderId}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authtoken: localStorage.getItem(\"authtoken\"),\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch order data\");\n    }\n\n    const data = await response.json();\n    return data.data;\n  } catch (error) {\n    console.error(\"Error during order data fetch:\", error);\n    return { status: \"error\", message: \"Something went wrong!\" };\n  }\n}","const host = \"\"\nconst DOMAIN = `${host}/api`\nconst findInObjectArray = (arr, key, value) => {\n    for (let i = 0; i < arr.length; i++) {\n        const element = arr[i];\n        if (element[key] === value) {\n            return true\n        }\n    }\n    return false\n}\nconst union = (databaseCart, reduxCart) => {\n    const arr = [];\n    [...databaseCart, ...reduxCart].forEach((item) => {\n        if (!findInObjectArray(arr, \"product_id\", item.product_id)) {\n            arr.push(item);\n        }\n    })\n    return arr;\n}\nconst difference = (databaseCart, reduxCart) => {\n    const arr = [];\n    reduxCart.forEach((item) => {\n        if (!findInObjectArray(databaseCart, \"product_id\", item.product_id)) {\n            arr.push(item);\n        }\n    })\n    return arr;\n}\n\nconst mergeCart = (databaseCart, reduxCart) => {\n    return { union: union(databaseCart, reduxCart), difference: difference(databaseCart, reduxCart) };\n}\n\n\nconst findIndexof = (cart,key, value) => {\n    for (let i = 0; i < cart.length; i++) {\n        const element = cart[i];\n        if (element[key] === value) {\n            return i;\n        }\n    }\n    return -1;\n};\n\nconst shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\n\nconst FinalBalance=cart=>{\n    let total = 0;\n    for (let i = 0; i < cart.length; i++) {\n      const item = cart[i];\n      total = total+item.quantity*item.price;\n    }\n    return total;\n  };\n\n\nexport { DOMAIN, findInObjectArray, union, difference, mergeCart, findIndexof , shuffleArray, FinalBalance}","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { orderbyId } from '../../API/order';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n`;\n\nconst OrderHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst OrderInfo = styled.div`\n  flex: 1;\n  text-align: left;\n`;\n\nconst OrderDate = styled.div`\n  font-size: 18px;\n`;\n\nconst OrderAmount = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n`;\n\nconst OrderItems = styled.ul`\n  list-style-type: none;\n  padding: 0;\n`;\n\nconst OrderItem = styled.li`\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  padding: 10px;\n  display: flex;\n  align-items: center;\n`;\n\nconst ItemImage = styled.img`\n  width: 100px;\n  height: 100px;\n  object-fit: cover;\n  margin-right: 20px;\n  border-radius: 4px;\n`;\n\nconst ItemDetails = styled.div`\n  flex: 1;\n`;\n\nconst OrderPreview = () => {\n  const { id } = useParams();\n  const [orderInfo, setOrderInfo] = useState(null);\n\n  useEffect(() => {\n    const fetchOrderById = async (id) => {\n      const data = await orderbyId(id);\n      setOrderInfo(data);\n    };\n    fetchOrderById(id);\n  }, [id]);\n\n  return (\n    <Container>\n      {orderInfo && (\n        <>\n          <OrderHeader>\n            <OrderInfo>\n              <OrderDate>{new Date(orderInfo.date).toLocaleString('en-US', { dateStyle: 'long', timeStyle: 'short' })}</OrderDate>\n              <OrderAmount>Total Amount: ${orderInfo.amount}</OrderAmount>\n            </OrderInfo>\n            <div>Order #{orderInfo.order_id}</div>\n          </OrderHeader>\n\n          <OrderItems>\n            {orderInfo.order_item.map((item) => (\n              <OrderItem key={item.item_id}>\n                <ItemImage src={item.image} alt={item.title} />\n                <ItemDetails>\n                  <div>{item.title}</div>\n                  <div>Price: ${item.price}</div>\n                  <div>Quantity: {item.quantity}</div>\n                </ItemDetails>\n              </OrderItem>\n            ))}\n          </OrderItems>\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default OrderPreview;\n"],"names":["host","concat","DOMAIN","getOrder","async","response","fetch","method","headers","authtoken","localStorage","getItem","ok","Error","json","data","error","console","status","message","postOrder","orderId","orderbyId","findInObjectArray","arr","key","value","i","length","union","databaseCart","reduxCart","forEach","item","product_id","push","difference","mergeCart","findIndexof","cart","FinalBalance","total","quantity","price","Container","styled","div","_templateObject","_taggedTemplateLiteral","OrderHeader","_templateObject2","OrderInfo","_templateObject3","OrderDate","_templateObject4","OrderAmount","_templateObject5","OrderItems","ul","_templateObject6","OrderItem","li","_templateObject7","ItemImage","img","_templateObject8","ItemDetails","_templateObject9","OrderPreview","id","useParams","orderInfo","setOrderInfo","useState","useEffect","fetchOrderById","_jsx","children","_jsxs","_Fragment","Date","date","toLocaleString","dateStyle","timeStyle","amount","order_id","order_item","map","src","image","alt","title","item_id"],"sourceRoot":""}